/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.maupou.subtitles;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.Action;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileObject;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_srt_VISUAL",
        iconBase = "org/maupou/subtitles/application-text.png",
        mimeType = "text/x-srt",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "srtVisual",
        position = 2000)
@Messages("LBL_srt_VISUAL=Visual")
public final class srtVisualElement extends JPanel implements MultiViewElement {

    private srtDataObject srtObject;
    private String[] titles;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private MaskFormatter mf;
    private int startInterp, endInterp;


    public srtVisualElement(Lookup lkp) {
        startInterp = 0;
        endInterp = 0;
        srtObject = lkp.lookup(srtDataObject.class);
        assert srtObject != null;
        titles = new String[]{"#", "Début", "Fin", "Texte"};
        try {
            mf = new MaskFormatter("##:##:##,###");
            mf.setPlaceholder("00:00:00,000");
            mf.setAllowsInvalid(false);
            initComponents();
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        InputVerifier iv = new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                if (!(input instanceof JFormattedTextField)) {
                    return true; // give up focus
                }
                JFormattedTextField textField = (JFormattedTextField) input;
                String txt = textField.getText();
                if (Integer.parseInt(txt.substring(0, 2)) > 59) {
                    return false;
                }
                if (Integer.parseInt(txt.substring(3, 5)) > 59) {
                    return false;
                }
                if (Integer.parseInt(txt.substring(6, 8)) > 59) {
                    return false;
                }
                return true;
            }
        };
        JFormattedTextField.AbstractFormatter af = startTimeField.getFormatter();
        startTimeField.setInputVerifier(iv);
        endTimeField.setInputVerifier(iv);
    }

    @Override
    public String getName() {
        return "srtVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        startLabel = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();
        startRange = new javax.swing.JSpinner();
        endRange = new javax.swing.JSpinner();
        startTimeField = new javax.swing.JFormattedTextField();
        endTimeField = endTimeField = new JFormattedTextField(mf);
        okButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        table.setModel(new DefaultTableModel(srtObject.getTabEntries(), titles));
        table.setIntercellSpacing(new java.awt.Dimension(3, 1));
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        table.getColumn("#").setMinWidth(32);
        table.getColumn("Début").setMinWidth(80);
        table.getColumn("Fin").setMinWidth(80);
        table.getColumn("Texte").setPreferredWidth(2000);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        add(scrollPane, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(startLabel, org.openide.util.NbBundle.getMessage(srtVisualElement.class, "srtVisualElement.startLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(endLabel, org.openide.util.NbBundle.getMessage(srtVisualElement.class, "srtVisualElement.endLabel.text")); // NOI18N

        startRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startRangeStateChanged(evt);
            }
        });

        endRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endRangeStateChanged(evt);
            }
        });

        startTimeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mf));
        startTimeField.setText("00:00:00,000"); // NOI18N
        startTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                startTimeFieldKeyTyped(evt);
            }
        });

        endTimeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mf));
        endTimeField.setText("00:00:00,000   "); // NOI18N
        endTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                endTimeFieldKeyTyped(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(srtVisualElement.class, "srtVisualElement.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(srtVisualElement.class, "srtVisualElement.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startLabel)
                    .addComponent(endLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startRange, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(endRange))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(okButton)
                .addGap(42, 42, 42)
                .addComponent(saveButton)
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startLabel)
                            .addComponent(startRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(endLabel)
                            .addComponent(endRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(okButton)
                            .addComponent(saveButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    public static int getMillis(String txt) {
        int h = Integer.parseInt(txt.substring(0, 2));
        int m = Integer.parseInt(txt.substring(3, 5));
        int s = Integer.parseInt(txt.substring(6, 8));
        int ms = Integer.parseInt(txt.substring(9));
        return ms + 1000 * (s + 60 * (m + 60 * h));
    }

    public static String getTime(int t) {
        int s = t / 1000;
        int ms = t - 1000 * s;
        int m = s / 60;
        s = s - 60 * m;
        int h = m / 60;
        m = m - 60 * h;
        return String.format("%02d:%02d:%02d,%04d", h, m, s, ms);
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (startInterp < endInterp) {
            int e0 = getMillis(startTimeField.getText());
            int e1 = getMillis(endTimeField.getText());
            int s0 = getMillis((String) table.getValueAt(startInterp, 1));
            int s1 = getMillis((String) table.getValueAt(endInterp, 1));
            int a = e1 - e0;
            int b = s1 - s0;
            double d = (a + 0.0) / b;
            int s, e, t;
            for (int i = startInterp; i < endInterp + 1; i++) {
                // (e-e0)/(s-s0)= (e1-e0)/(s1-s0)
                s = getMillis((String) table.getValueAt(i, 1));
                t = getMillis((String) table.getValueAt(i, 2)); // fin du sous-titre
                e = (int) (e0 + (s - s0) * d);
                table.setValueAt(getTime(e), i, 1);
                table.setValueAt(getTime(e + t - s), i, 2);
            }
            table.repaint();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int[] selectedRows = table.getSelectedRows();
        if (selectedRows.length != 0) {
            startInterp = selectedRows[0];
            endInterp = selectedRows[selectedRows.length - 1];
            startRange.setValue(startInterp);
            endRange.setValue(endInterp);
            startTimeField.setText((String) table.getValueAt(startInterp, 1));
            endTimeField.setText((String) table.getValueAt(endInterp, 1));
        }
    }//GEN-LAST:event_tableMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        ArrayList<String> nlines = new ArrayList();
        for (int i = 0; i < table.getRowCount(); i++) {
            nlines.add((String) table.getValueAt(i, 0));
            String seq = table.getValueAt(i, 1) + " --> " + table.getValueAt(i, 2);
            nlines.add(seq);
            String[] txt = ((String) table.getValueAt(i, 3)).split("\\n");
            nlines.addAll(Arrays.asList(txt));
            nlines.add("");
        }
        FileObject fo = srtObject.getPrimaryFile();
        String pathname = fo.getPath();
        int index = pathname.lastIndexOf(".");
        if (index != -1) {
            pathname = pathname.substring(0, index) + "_" + pathname.substring(index);
        }
        Path path = Paths.get(pathname);
        try {
            Files.write(path, nlines, StandardCharsets.UTF_8);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void startRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startRangeStateChanged
        startInterp = (Integer) startRange.getValue();
        if (endInterp <= startInterp) {
            endInterp = startInterp;
        }
        table.setRowSelectionInterval(startInterp, endInterp);
    }//GEN-LAST:event_startRangeStateChanged

    private void endRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endRangeStateChanged
        endInterp = (Integer) endRange.getValue();
        if (endInterp <= startInterp) {
            startInterp = endInterp;
        }
        table.setRowSelectionInterval(startInterp, endInterp);
    }//GEN-LAST:event_endRangeStateChanged

    private void startTimeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startTimeFieldKeyTyped
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            startInterp = (Integer) startRange.getValue();
            if (endInterp <= startInterp) {
                endInterp = startInterp;
            }
            table.setRowSelectionInterval(startInterp, endInterp);
        }
    }//GEN-LAST:event_startTimeFieldKeyTyped

    private void endTimeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_endTimeFieldKeyTyped
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            endInterp = (Integer) endRange.getValue();
            if (endInterp <= startInterp) {
                startInterp = endInterp;
            }
            table.setRowSelectionInterval(startInterp, endInterp);
        }
    }//GEN-LAST:event_endTimeFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel endLabel;
    private javax.swing.JSpinner endRange;
    private javax.swing.JFormattedTextField endTimeField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel startLabel;
    private javax.swing.JSpinner startRange;
    private javax.swing.JFormattedTextField startTimeField;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return srtObject.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
}
